{"version":3,"file":"keyboard-events.min.js","sources":["../src/keyboard-events.js"],"sourcesContent":["/**\n * A module to wrap keyboard events on the DOM.\n *\n * Provides ability to listen for keyboard events\n * occurring on elements and provides user friendly\n * names for key combinations and the ability to attach\n * data to events.\n *\n * It is used by mapping key combinations to functions and\n * allows for custom action modules to be defined and\n * included with your own actions.\n */\n\nlet document;\n\n/**\n * Key code to friendly name mappings\n */\nconst fns = {\n  8   : 'backspace',\n  9   : 'tab',\n  13  : 'enter',\n  20  : 'capslock',\n  27  : 'esc',\n  32  : 'space',\n  33  : 'page-up',\n  34  : 'page-down',\n  35  : 'end',\n  36  : 'home',\n  37  : 'arrow-left',\n  38  : 'arrow-up',\n  39  : 'arrow-right',\n  40  : 'arrow-down',\n  45  : 'insert',\n  46  : 'delete',\n  144 : 'numlock',\n};\n\n/**\n * Key code to special key friendly name mappings\n */\nconst metaKeys = {\n  16  : 'shift',\n  17  : 'ctrl',\n  18  : 'alt',\n  91  : 'cmd',\n};\n\n/**\n * Keeps the special key states for building\n * command strings from\n */\nconst metaKeysState = new Map([\n  [91, {name: 'cmd',   selected: false}],\n  [17, {name: 'ctrl',  selected: false}],\n  [16, {name: 'shift', selected: false}],\n  [18, {name: 'alt',   selected: false}],\n]);\n\n/**\n * Flag to denote special key(s) have\n * been pressed\n */\nlet hasMetaKeys = false;\n\n/**\n * The current command string\n */\nlet command = '';\n\n/**\n * A Map of all the subscriptions\n */\nconst subscriptions = new Map();\n\n/**\n * Listen to key events on the body element\n */\nfunction listen(elm) {\n  unlisten(elm);\n  elm.addEventListener('keydown', map);\n  elm.addEventListener('keyup', resetMetaKeys);\n}\n\n/**\n * Stop listening to key events on the body element\n */\nfunction unlisten(elm) {\n  elm.removeEventListener('keydown', map);\n  elm.removeEventListener('keyup', resetMetaKeys);\n}\n\n\n/**\n * Get any registered elements and map over them\n *\n * @param {Event} event - Keyboard event\n */\nfunction map(event) {\n  findElements(event).map(doMap(event));\n}\n\n/**\n * Map the key(s) that were pressed to any actions on the\n * current element\n *\n * @param {Event} event - Keyboard event\n * @param {HTMLElement} element - The HTML element to check subscriptions on\n */\nconst doMap = event => element => {\n  // get the subcription for the element\n  const subscription = subscriptions.get(element);\n  // get the key to use based on the cmd key settings\n  const key = getKey(subscription.useCmdKey, event);\n  // check if the key is a special key and set it if so\n  if (!isMetaKey(key)) {\n    // add meta keys to the command sring\n    addMetaKeysToCommand();\n    // add the key to the command string\n    addKeyToCommand(key);\n    // get the action associated with the command\n    const action = subscription.actions.get(command.toLowerCase());\n    // do callback\n    executeCallback(element, subscription, action, event);\n    // clear command\n    command = '';\n  }\n};\n\n/**\n * Adds the key to the command string\n *\n * @param {integer} key - The key code of the event\n */\nfunction addKeyToCommand(key) {\n  command += fns[key] || String.fromCharCode(key).toLowerCase();\n}\n\n/**\n * Execute the action callback function\n *\n * @param {HTMLElement} element - The HTML element to execute the callback on\n * @param {Object} subscription - The subscription for this element\n * @param {Object} action - The action asscoiated with the key sequence\n * @param {Event} event - Keyboard event\n */\nfunction executeCallback(element, subscription, action, event) {\n  if (action && action.fn && action.fn !== '-') {\n    action.fn({\n      element,\n      event,\n      command,\n      target: event.target,\n      data: action.data,\n      props: subscription.props,\n    });\n    if (action.once) {\n      subscriptions.delete(element);\n    }\n  }\n}\n\n/**\n * Adds meta keys to the command string if they exist\n */\nfunction addMetaKeysToCommand() {\n  if (hasMetaKeys) {\n    for (let [key, value] of metaKeysState.entries()) {\n      if (value.selected) {\n        command += value.name + '+';\n      }\n    }\n  }\n}\n\n/**\n * Checks if the key is a special key and sets it\n * if it is\n *\n * @param {integer} key - The key code of the event\n */\nfunction isMetaKey(key) {\n  if (metaKeys[key]) {\n    hasMetaKeys = true;\n    metaKeysState.get(key).selected = true;\n    return true;\n  }\n  return false;\n}\n\n/**\n * Reset all the special keys to false\n */\nfunction resetMetaKeys() {\n  for (let [key, value] of metaKeysState.entries()) {\n    metaKeysState.get(key).selected = false;\n  }\n}\n\n/**\n * Find registered elements by traversing up from the\n * event target element and returning any registered elements\n *\n * @param {Event} event - Keyboard event\n */\nfunction findElements(event) {\n  // const path =\n  return (event.path || (event.composedPath && event.composedPath()) || getPath(event))\n    .filter(elm => subscriptions.get(elm));\n}\n\n/**\n * Gets event path in browsers that don't support event.path\n * or event.composedPath()\n *\n * @param {Event} event - Keyboard event\n */\nfunction getPath(event) {\n  let elm = event.target;\n  const path = [];\n  while (elm.tagName.toLowerCase() !== 'html') {\n    path.push(elm);\n    elm = elm.parentElement;\n  }\n  if (document) {\n    path.push(document);\n  }\n  if (typeof Window !== 'undefined') {\n    path.push(Window);\n  }\n  return path;\n}\n\n/**\n * If not using the cmd key and the key pressed is the\n * cmd key then convert it to the ctrl key\n *\n * @param {Boolean} useCmdKey - Whether to use the command key\n *   or change it to the ctrl key\n * @param {Event} event - Keyboard event\n */\nconst getKey = (useCmdKey, event) =>\n  useCmdKey\n    ? event.which\n    : event.which === 91\n      ? 17\n      : event._testCode || event.which;\n\nconst unsubscribe = (elm) => () => {\n  subscriptions.delete(elm);\n  unlisten(elm)\n};\n\nfunction unsubscribeAll() {\n  [...subscriptions.keys()].forEach(key => {\n    unlisten(key);\n  });\n  subscriptions.clear();\n}\n\n/**\n * Subscribes the element and it's actions\n *\n * @param {Object} options - Configuration options\n * @param {HTMLElement} options.elm - The HTML element to bind the actions to\n * @param {Array} options.use - An array of pre-configured actions\n * @param {Array} options.actions - An array of action defnitions\n * @param {Object} options.props - Properties to pass to all actions\n * @param {Array} options.useCmdKey - Flag to denote using the cmd key\n *\n * @returns {Object} An unsubscribe function and the listen function for testing purposes\n * @throws Throws an error if no element option is supplied\n */\nfunction Keyboard(options) {\n  if (!options.elm) {\n    throw new Error(`\n      Trying to create a keyboard event listener without providing\n      an element to listen on\n    `);\n  }\n  subscriptions.set(options.elm, {\n    useCmdKey: options.useCmdKey || false,\n    props: options.props || {},\n    actions: new Map((options.use || []).concat(options.actions || [])),\n  });\n  document = options.document\n    ? options.document\n    : window.document;\n  listen(otions.elm);\n  return {\n    unsubscribe,\n    listen,\n  };\n}\n\n/**\n * Provide a means to stop listenting to all key events\n * on the body element\n */\nKeyboard.clear = unsubscribeAll;\n\nexport default Keyboard;\n"],"names":["document","fns","metaKeys","metaKeysState","Map","name","selected","hasMetaKeys","command","subscriptions","listen","elm","addEventListener","map","resetMetaKeys","unlisten","removeEventListener","event","doMap","subscription","get","element","key","getKey","useCmdKey","isMetaKey","action","actions","toLowerCase","addKeyToCommand","String","fromCharCode","executeCallback","fn","target","data","props","once","delete","addMetaKeysToCommand","entries","value","findElements","path","composedPath","getPath","filter","tagName","push","parentElement","Window","which","_testCode","unsubscribe","unsubscribeAll","keys","forEach","clear","Keyboard","options","Error","set","use","concat","window","otions"],"mappings":"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"}